"use strict";(self.webpackChunkviki=self.webpackChunkviki||[]).push([[925],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),s=p(n),m=i,f=s["".concat(c,".").concat(m)]||s[m]||d[m]||a;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=s;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},4231:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return s}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),l=["components"],o={sidebar_position:2},c="02 Compiler",p={unversionedId:"pl/c++/compiler",id:"pl/c++/compiler",title:"02 Compiler",description:"The compiler will take our source files and output an object file which contains machine code and any other constant data that we've defined.",source:"@site/docs/pl/c++/02-compiler.md",sourceDirName:"pl/c++",slug:"/pl/c++/compiler",permalink:"/viki/docs/pl/c++/compiler",editUrl:"https://github.com/v3ce/viki/edit/docs/docs/environment/index.md/docs/pl/c++/02-compiler.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"plSidebar",previous:{title:"01 Overview of C++",permalink:"/viki/docs/pl/c++/overview"},next:{title:"03 Linker",permalink:"/viki/docs/pl/c++/linker"}},u=[{value:"Preprocess",id:"preprocess",children:[],level:2},{value:"Translation Unit",id:"translation-unit",children:[],level:2},{value:"Why not write redundant code?",id:"why-not-write-redundant-code",children:[{value:"Bad example",id:"bad-example",children:[],level:3},{value:"Good example",id:"good-example",children:[],level:3},{value:"Constant folding",id:"constant-folding",children:[],level:3}],level:2}],d={toc:u};function s(e){var t=e.components,n=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"02-compiler"},"02 Compiler"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The compiler will take our source files and output an object file which contains machine code and any other constant data that we've defined.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"After we got these object files, we can ",(0,a.kt)("strong",{parentName:"p"},"link")," 'em into one executable, which contains all machine code that we actually need to run.")),(0,a.kt)("h2",{id:"preprocess"},"Preprocess"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"First, compiler goes through each preprocessing statement (starts with ",(0,a.kt)("inlineCode",{parentName:"li"},"#"),"), and evaluate 'em."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"#include <$FILE_NAME>"),": open ",(0,a.kt)("inlineCode",{parentName:"li"},"$FILE_NAME"),", read all content, paste all content."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"#define Integer int"),": replace all ",(0,a.kt)("inlineCode",{parentName:"li"},"int")," with ",(0,a.kt)("inlineCode",{parentName:"li"},"Integer")),(0,a.kt)("li",{parentName:"ul"},"Compiler generates ",(0,a.kt)("inlineCode",{parentName:"li"},"*.obj")," for each ",(0,a.kt)("inlineCode",{parentName:"li"},"*.cpp"),". A file is just a source text to be fed into the compiler.\nFiles have no meaning.")),(0,a.kt)("h2",{id:"translation-unit"},"Translation Unit"),(0,a.kt)("p",null,"$n$ cpp files without including each other: $n$ translation units.\n$n$ cpp files with one cpp files including each other: $1$ translation unit."),(0,a.kt)("h2",{id:"why-not-write-redundant-code"},"Why not write redundant code?"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"obj file contains machine code.")),(0,a.kt)("h3",{id:"bad-example"},"Bad example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"int multiply(int a, int b) {\n  int res = a * b;\n  return res;\n}\n")),(0,a.kt)("p",null,"will be compiled to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// load the variable to eax register\nmov  eax, DWORD PTR _a$[ebp]\n\n// perform multiplication with the variable in the register and b variable\nimul eax, DWORD PTR _b$[ebp]\n\n// store the multiplied value of the register to a variable called result (redundant)\nmov  DWORD PTR _res$[ebp], eax\n\n// load the variable back to eax register (redundant)\nmov  eax, DWORD PTR _res$[ebp]\n")),(0,a.kt)("h3",{id:"good-example"},"Good example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"int multiply(int a, int b) {\n  return a * b;\n}\n")),(0,a.kt)("p",null,"will be compiled to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mov  eax, DWORD PTR _a$[ebp]\nimul eax, DWORD PTR _b$[ebp]\n")),(0,a.kt)("p",null,"Much cleaner!"),(0,a.kt)("h3",{id:"constant-folding"},"Constant folding"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"int multiply() {\n  return 2 * 5;\n}\n")),(0,a.kt)("p",null,"will be compiled to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mov  eax, 10\n")))}s.isMDXComponent=!0}}]);