"use strict";(self.webpackChunkviki=self.webpackChunkviki||[]).push([[762],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),u=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=u(e.components);return i.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),d=u(t),m=r,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||l;return t?i.createElement(f,o(o({ref:n},s),{},{components:t})):i.createElement(f,o({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=d;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,o[1]=a;for(var u=2;u<l;u++)o[u]=t[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7026:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return d}});var i=t(7462),r=t(3366),l=(t(7294),t(3905)),o=["components"],a={},c="03 Linker",u={unversionedId:"pl/c++/linker",id:"pl/c++/linker",title:"03 Linker",description:"Find where each symbol and function is.",source:"@site/docs/pl/c++/03-linker.md",sourceDirName:"pl/c++",slug:"/pl/c++/linker",permalink:"/viki/docs/pl/c++/linker",editUrl:"https://github.com/v3ce/viki/edit/docs/docs/environment/index.md/docs/pl/c++/03-linker.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"plSidebar",previous:{title:"02 Compiler",permalink:"/viki/docs/pl/c++/compiler"},next:{title:"04 Variables",permalink:"/viki/docs/pl/c++/variables"}},s=[{value:"Error Examples",id:"error-examples",children:[],level:2},{value:"Some issue with <code>#include</code>",id:"some-issue-with-include",children:[{value:"Fix 1",id:"fix-1",children:[],level:3},{value:"Fix 2",id:"fix-2",children:[],level:3},{value:"Fix 3 (Better)",id:"fix-3-better",children:[],level:3}],level:2}],p={toc:s};function d(e){var n=e.components,t=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"03-linker"},"03 Linker"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Find where each symbol and function is.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Build = Compilation + Linking"),(0,l.kt)("li",{parentName:"ul"},"It's important to know the error comes from what stage",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"LNK2019: unresolved external symbol")," comes from linking stage"))),(0,l.kt)("li",{parentName:"ul"},"We can specify our custom entry point (not necessary to be ",(0,l.kt)("inlineCode",{parentName:"li"},"int main()"),", it's just convention."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"static"),": this funtion only be used in this translation unit")),(0,l.kt)("h2",{id:"error-examples"},"Error Examples"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"log.cpp"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\n// mispelled\nvoid Logr(const char* msg) {\n  std::cout << msg << std::endl;\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"main.cpp"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n\nvoid Log(const char* msg);\n\n// add static in the following function to make this function only\n// declared for this translation unit (main.cpp), so that if we\n// don't call it inside `main.cpp`, we won't get linking error\nint multiply(int a, int b) {\n  // Linking error because `Log(char const *)` is not defined.\n  // if we comment the following line, because we never call\n  // `Log(char const *)`, linker has nothing to do, so no\n  // linking error.\n  Log(\"multiply\");\n  return a * b;\n}\n\nint main() {\n  // if we comment the following line, we still got linking\n  // because multiply(int, int) might be called somewhere else\n  std::cout << multiply(2, 3) << std::endl;\n}\n")),(0,l.kt)("h2",{id:"some-issue-with-include"},"Some issue with ",(0,l.kt)("inlineCode",{parentName:"h2"},"#include")),(0,l.kt)("p",null,"Remember what ",(0,l.kt)("inlineCode",{parentName:"p"},"include")," actually does is copying and pasting, so that if we include the same function in two different files, we'll end up have duplicate definition, causing linking error."),(0,l.kt)("h3",{id:"fix-1"},"Fix 1"),(0,l.kt)("p",null,"Add ",(0,l.kt)("inlineCode",{parentName:"p"},"static")," before the function to be included. Essentially each translation unit now has their ",(0,l.kt)("strong",{parentName:"p"},"own version")," of the function."),(0,l.kt)("h3",{id:"fix-2"},"Fix 2"),(0,l.kt)("p",null,"Add ",(0,l.kt)("inlineCode",{parentName:"p"},"inline")," to essentially replace the text."),(0,l.kt)("h3",{id:"fix-3-better"},"Fix 3 (Better)"),(0,l.kt)("p",null,"Move the declaration into one of the existing translation unit."))}d.isMDXComponent=!0}}]);